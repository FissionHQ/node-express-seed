{
  "openapi": "3.0.0",
  "info": {
    "title": "API Boilerplate",
    "description": "This is a boilerplate API server.",
    "termsOfService": "http://example.com/terms/",
    "contact": {
      "name": "Ishtiaque Zafar",
      "url": "https://dev-z.github.io/support",
      "email": "ishtiaque.zafar92@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://development.gigantic-server.com/api/v1",
      "description": "Development server"
    },
    {
      "url": "https://staging.gigantic-server.com/api/v1",
      "description": "Staging server"
    },
    {
      "url": "https://api.gigantic-server.com/api/v1",
      "description": "Production server"
    }
  ],
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique autogenerated id of a user."
          },
          "name": {
            "type": "string",
            "description": "Name of the user."
          },
          "email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "mobile": {
            "type": "string",
            "description": "10 digit mobile number."
          },
          "areasOfInterest": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subscribedFeeds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feed"
            }
          },
          "doj": {
            "type": "string",
            "format": "date-time",
            "description": "Date of joining of a user."
          },
          "dob": {
            "type": "string",
            "format": "date-time",
            "description": "Date of birth."
          }
        }
      },
      "NewUser": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the user."
          },
          "email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "password": {
            "type": "string",
            "description": "Password that the user wants.",
            "format": "password"
          },
          "mobile": {
            "type": "string",
            "description": "10 digit mobile number."
          },
          "dob": {
            "type": "string",
            "format": "date-time",
            "description": "Date of birth."
          }
        }
      },
      "GeneralError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          }
        }
      }
    },
    "parameters": {
      "skipParam": {
        "name": "skip",
        "in": "query",
        "description": "number of items to skip",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "limitParam": {
        "name": "limit",
        "in": "query",
        "description": "max records to return",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "responses": {
      "NotFound": {
        "description": "Entity not found."
      },
      "IllegalInput": {
        "description": "Illegal input for operation."
      },
      "GeneralError": {
        "description": "General Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeneralError"
            }
          }
        }
      },
      "DeletedSuccess": {
        "description": "Response when a delete request is successful",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "success": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "x-access-token",
        "in": "header"
      }
    }
  },
  "paths": {
    "/authentication": {
      "post": {
        "summary": "Authenticate User",
        "description": "Authenticates a user with a given email and password.",
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "An object which contains the access token and user data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "token": {
                      "type": "string"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "List of users",
        "description": "Retrieves a list of users based on certain filters",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "filter by user id(s)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "filter by user name(s)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nl",
            "in": "query",
            "description": "filter by name like. Accepts only single value",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "filter by email(s)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mobile",
            "in": "query",
            "description": "filter by mobile",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/skipParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new User",
        "description": "Creates a new user",
        "tags": [
          "User"
        ],
        "requestBody": {
          "description": "User to add to the system",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Newly created User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "summary": "Info about a specific user",
        "description": "Fetch information about a specific user",
        "tags": ["User"],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of the user",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A User document object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GeneralError"
          },
          "404": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      },
      "put": {
        "summary": "Update a specific user",
        "description": "Update a specific user",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of the user",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "User data to update. Non-editable fields are ignored.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated User document object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GeneralError"
          },
          "401": {
            "$ref": "#/components/responses/GeneralError"
          },
          "404": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      },
      "delete": {
        "summary": "Delete a specific user",
        "description": "Delete a specific user",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of the user",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletedSuccess"
          },
          "400": {
            "$ref": "#/components/responses/GeneralError"
          },
          "401": {
            "$ref": "#/components/responses/GeneralError"
          }
        }
      }
    }
  }
}