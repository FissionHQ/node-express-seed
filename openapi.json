{
  "openapi": "3.0.0",
  "info": {
    "title": "Node-Express API Boilerplate",
    "description": "This is a boilerplate API server.",
    "termsOfService": "http://example.com/terms/",
    "contact": {
      "name": "Md Ishtiaque Zafar",
      "url": "https://dev-z.github.io/support",
      "email": "ishtiaque.zafar92@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://localhost8000/api/v1",
      "description": "Development server"
    },
    {
      "url": "https://staging.gigantic-server.com/api/v1",
      "description": "Staging server"
    },
    {
      "url": "https://api.gigantic-server.com/api/v1",
      "description": "Production server"
    }
  ],
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique autogenerated id of a user."
          },
          "name": {
            "type": "string",
            "description": "Name of the user."
          },
          "email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "mobile": {
            "type": "string",
            "description": "10 digit mobile number."
          },
          "doj": {
            "type": "string",
            "format": "date-time",
            "description": "Date of joining of a user."
          },
          "dob": {
            "type": "string",
            "format": "date-time",
            "description": "User's Date of birth."
          },
          "age": {
            "type": "number",
            "description": "Age of User."
          }
        }
      },
      "NewUser": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the user."
          },
          "email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "password": {
            "type": "string",
            "description": "Password that the user wants.",
            "format": "password"
          },
          "mobile": {
            "type": "string",
            "description": "10 digit mobile number."
          },
          "dob": {
            "type": "string",
            "format": "date-time",
            "description": "Date of birth."
          }
        }
      },
      "GeneralError": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": false 
          },
          "message": {
            "type": "string",
            "description": "Human readable error message."
          },
          "errorCode": {
            "type": "string",
            "description": "A constant stating the error code. e.g.: USER_NOT_FOUND. Use this field for comparison to process the error."
          },
          "statusCode": {
            "type": "number",
            "description": "HTTP status code"
          }
        }
      },
      "GeneralSuccess": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": true
          },
          "message": {
            "type": "string",
            "description": "Human readable error message."
          },
          "statusCode": {
            "type": "number",
            "description": "HTTP status code"
          }
        }
      },
      "Login": {
        "type": "object",
        "required": [
          "grant_type"
        ],
        "properties": {
          "grant_type": {
            "type": "string",
            "enum": ["password", "refresh_token"]
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          }
        }
      }
    },
    "parameters": {
      "skipParam": {
        "name": "skip",
        "in": "query",
        "description": "number of items to skip",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "limitParam": {
        "name": "limit",
        "in": "query",
        "description": "max records to return",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "x-access-token",
        "in": "header"
      }
    }
  },
  "paths": {
    "/auth/login": {
      "post": {
        "summary": "Authenticate User",
        "description": "Authenticates a user with a given email and password OR refresh_token.",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "description": "Send credentials. If using grant_type=password, send email and password. If using grant_type=refresh_token, send refresh_token",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "An object which contains the user data, access token, refreh_token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number"
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "token_type": {
                      "type": "string",
                      "description": "describe the type of token. Value will be 'bearer'"
                    },
                    "access_token": {
                      "type": "string",
                      "description": "Short lived token to provide access to authenticated users to the API"
                    },
                    "refresh_token": {
                      "type": "string",
                      "description": "A longer lived token which can be used to get new access_token"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. errorCode can be one of MISSING_REQUIRED_FIELD, INVALID_FIELD_VALUE, USER_INVALID_CREDENTIALS.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralError"
                }
              }
            }
          },
          "403": {
            "description": "Bad request. errorCode will be USER_EMAIL_NOT_VERIFIED.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralError"
                }
              }
            }
          },
          "404": {
            "description": "Bad request. errorCode will be USER_NOT_FOUND, USER_INACTIVE.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on the server side.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralError"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "List users. Can also be used to search users",
        "description": "Retrieves a list of users based on certain filters",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "filter by user id(s)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "filter by user name(s)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nl",
            "in": "query",
            "description": "filter by name like. Accepts only single value",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "filter by email(s)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mobile",
            "in": "query",
            "description": "filter by mobile",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limitParam"
          },
          {
            "$ref": "#/components/parameters/skipParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on the server side. errorCode = USER_READ_FAILED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new User",
        "description": "Creates a new user",
        "tags": [
          "User"
        ],
        "requestBody": {
          "description": "User to add to the system",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Newly created User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. errorCode can be one of INVALID_DATA, INVALID_FIELD_VALUE, EMAIL_ALREADY_EXISTS, REQUEST_FAILED.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "summary": "Info about a specific user",
        "description": "Fetch information about a specific user",
        "tags": ["User"],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of the user",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A User document object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found. errorCode will be USER_NOT_FOUND.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on the server side. errorCode will be USER_READ_FAILED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a specific user",
        "description": "Update a specific user",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of the user",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "User data to update. Non-editable fields are ignored.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated User document object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "User not found. errorCode will be MISSING_REQUIRED_FIELD.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. errorCode will be FORBIDDEN.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralError"
                }
              }
            }
          },
          "404": {
            "description": "User not found. errorCode will be USER_NOT_FOUND.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on the server side. errorCode will be USER_UPDATE_FAILED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a specific user",
        "description": "Delete a specific user",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of the user",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/GeneralSuccess"
          },
          "400": {
            "description": "User not found. errorCode will be MISSING_REQUIRED_FIELD.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. errorCode will be FORBIDDEN.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralError"
                }
              }
            }
          },
          "404": {
            "description": "User not found. errorCode will be USER_NOT_FOUND.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong on the server side. errorCode will be USER_DELETE_FAILED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralError"
                }
              }
            }
          }
        }
      }
    }
  }
}